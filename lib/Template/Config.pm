#============================================================= -*-perl-*-
#
# Template::Config
#
# DESCRIPTION
#   Template Toolkit configuration module.
#
# AUTHOR
#   Andy Wardley   <abw@kfs.org>
#
# COPYRIGHT
#   Copyright (C) 1996-2000 Andy Wardley.  All Rights Reserved.
#   Copyright (C) 1998-2000 Canon Research Centre Europe Ltd.
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
#------------------------------------------------------------------------
#
#   $Id$
#
#========================================================================
 
package Template::Config;

require 5.004;

use strict;
use base qw( Template::Base );
use vars qw( $VERSION $DEBUG $ERROR $AUTOLOAD 
	     $PARSER $PROVIDER $PLUGINS $FILTERS $STASH $SERVICE $CONTEXT);

$VERSION  = sprintf("%d.%02d", q$Revision$ =~ /(\d+)\.(\d+)/);
$DEBUG    = 0 unless defined $DEBUG;
$ERROR    = '';

$CONTEXT  = 'Template::Context';
$FILTERS  = 'Template::Filters';
$PARSER   = 'Template::Parser';
$PLUGINS  = 'Template::Plugins';
$PROVIDER = 'Template::Provider';
$SERVICE  = 'Template::Service';
$STASH    = 'Template::Stash';

#========================================================================
#                       --- CLASS METHODS ---
#========================================================================

#------------------------------------------------------------------------
# load($module)
#
# Load a module via require().  Any occurences of '::' in the module name
# are be converted to '/' and '.pm' is appended.  Returns 1 on success
# or undef on error.  Use $class->error() to examine the error string.
#------------------------------------------------------------------------

sub load {
    my ($class, $module) = @_;
    $module =~ s[::][/]g;
    $module .= '.pm';
    print STDERR "loading $module\n"
	if $DEBUG;
    eval {
	require $module;
    };
    return $@ ? $class->error("failed to load $module: $@") : 1;
}


#------------------------------------------------------------------------
# parser(\%params)
#
# Instantiate a new parser object of the class whose name is denoted by
# the package variable $PARSER (default: Template::Parser).  Returns
# a reference to a newly instantiated parser object or undef on error.
# The class error() method can be called without arguments to examine
# the error message generated by this failure.
#------------------------------------------------------------------------

sub parser {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($PARSER);
    return $PARSER->new($params) 
	|| $class->error("failed to create parser: ", $PARSER->error);
}


#------------------------------------------------------------------------
# provider(\%params)
#
# Instantiate a new template provider object (default: Template::Provider).
# Returns an object reference or undef on error, as above.
#------------------------------------------------------------------------

sub provider {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($PROVIDER);
    return $PROVIDER->new($params) 
	|| $class->error("failed to create template provider: ",
			 $PROVIDER->error);
}


#------------------------------------------------------------------------
# plugins(\%params)
#
# Instantiate a new plugins provider object (default: Template::Plugins).
# Returns an object reference or undef on error, as above.
#------------------------------------------------------------------------

sub plugins {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($PLUGINS);
    return $PLUGINS->new($params)
	|| $class->error("failed to create plugin provider: ",
			 $PLUGINS->error);
}


#------------------------------------------------------------------------
# filters(\%params)
#
# Instantiate a new filters provider object (default: Template::Filters).
# Returns an object reference or undef on error, as above.
#------------------------------------------------------------------------

sub filters {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($FILTERS);
    return $FILTERS->new($params)
	|| $class->error("failed to create filter provider: ",
			 $FILTERS->error);
}

#------------------------------------------------------------------------
# stash(\%vars)
#
# Instantiate a new template variable stash object (default: 
# Template::Stash). Returns object or undef, as above.
#------------------------------------------------------------------------

sub stash {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($STASH);
    return $STASH->new($params) 
	|| $class->error("failed to create stash: ", $STASH->error);
}


#------------------------------------------------------------------------
# context(\%params)
#
# Instantiate a new template context object (default: Template::Context). 
# Returns object or undef, as above.
#------------------------------------------------------------------------

sub context {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($CONTEXT);
    return $CONTEXT->new($params) 
	|| $class->error("failed to create context: ", $CONTEXT->error);
}

#------------------------------------------------------------------------
# service(\%params)
#
# Instantiate a new template context object (default: Template::Service). 
# Returns object or undef, as above.
#------------------------------------------------------------------------

sub service {
    my $class  = shift;
    my $params = UNIVERSAL::isa($_[0], 'HASH') ? shift : { @_ };

    return undef unless $class->load($SERVICE);
    return $SERVICE->new($params) 
	|| $class->error("failed to create context: ", $SERVICE->error);
}


1;
__END__

#========================================================================
#                           -- DOCUMENTATION --
#========================================================================

=head1 NAME

Template::Config - factory module for creating other toolkit modules

=head1 SYNOPSIS

    use Template::Config;

=head1 DESCRIPTION

This module implements various methods for loading and instantiating
other modules that comprise the Template Toolkit.  It provides a consistent
way to create toolkit components and allows custom modules to be used in 
place of the regular ones.

Package variables such as $STASH, $SERVICE, $CONTEXT, etc., contain
the default module/package name for each component (Template::Stash,
Template::Service and Template::Context, respectively) and are used by
the various factory methods (stash(), service() and context()) to load
the appropriate module.  Changing these package variables will cause
subsequent calls to the relevant factory method to load and instantiate
an object from the new class.

=head1 PUBLIC METHODS

=head2 load($module)

Load a module via require().  Any occurences of '::' in the module name
are be converted to '/' and '.pm' is appended.  Returns 1 on success
or undef on error.  Use $class->error() to examine the error string.

=head2 parser(\%config)

Instantiate a new parser object of the class whose name is denoted by
the package variable $PARSER (default: Template::Parser).  Returns
a reference to a newly instantiated parser object or undef on error.

=head2 provider(\%config)

Instantiate a new template provider object (default: Template::Provider).
Returns an object reference or undef on error, as above.

=head2 plugins(\%config)

Instantiate a new plugins provider object (default: Template::Plugins).
Returns an object reference or undef on error, as above.

=head2 filters(\%config)

Instantiate a new filter provider object (default: Template::Filters).
Returns an object reference or undef on error, as above.

=head2 stash(\%vars)

Instantiate a new stash object (default: Template::Templates) using the 
contents of the optional hash array passed by parameter as initial variable
definitions.  Returns an object reference or undef on error, as above.

=head2 context(\%config)

Instantiate a new template context object (default: Template::Context).
Returns an object reference or undef on error, as above.

=head2 service(\%config)

Instantiate a new template service object (default: Template::Service).
Returns an object reference or undef on error, as above.

=head1 AUTHOR

Andy Wardley E<lt>abw@kfs.orgE<gt>

=head1 REVISION

$Revision$

=head1 COPYRIGHT

Copyright (C) 1996-2000 Andy Wardley.  All Rights Reserved.
Copyright (C) 1998-2000 Canon Research Centre Europe Ltd.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template|Template> 

=cut






