[% TAGS star %]
=head1 DESCRIPTION

B<NOTE:> This documentation is incomplete, incorrect and outdated.
The Splash! library is still evolving and subject to change.  See
the examples for a much more recent and accurate demonstration of
use.

=head2 Introduction

The 'Splash' template library is distributed as part of the Template
Toolkit.  It can be found in the 'templates' sub-directory of the
installation directory.

    /your/tt2/installation
    |
    +-- docs
    |      ...
    |  
    +-- images
    |      ...
    |
    +-- examples
    |      ...
    |
    +-- templates
        |
        +-- html
        |      ...
        +-- pod
        |      ...
        +-- splash     <<<< YOU ARE HERE
               ...


To use the Splash library, you first need to tell the Template Toolkit
where to find the template files.

    use Template;

    my $tt2 = Template->new({
	INCLUDE_PATH => '/usr/local/tt2/templates',
    });

For a portable way to determine the installation 'templates' directory,
you can use the C<Template::Config-E<gt>instdir()> class method.

    use Template;

    my $tt2 = Template->new({
	INCLUDE_PATH => Template::Config->instdir('templates'),
    });

Note that you should set the INCLUDE_PATH to the 'templates' directory
as shown here and don't be tempted to set the INCLUDE_PATH to
'templates/splash'.  Many of the Splash! components use elements in
the 'html' directory and contain directives of the form:

    [% INCLUDE html/something %].

=head2 Configuration

The 'splash/config' template defines a 'splash' hash array which
contains numerous configuration items for the Splash library.  You
must PROCESS this template to ensure that the hash definition is
imported into your calling template.  An INCLUDE is not sufficient as
it localises variables and prevents the 'splash' hash array from
existing outside the splash/config template.

    [% PROCESS splash/config %]

Alternately, you can define the splash/config template as a PRE_PROCESS
item when you create the Template processor. 

    use Template;

    my $tt2 = Template->new({
	INCLUDE_PATH => Template::Config->instdir('templates'),
	PRE_PROCESS  => 'splash/config',
    });

You can modify the default configuration by creating your own
PRE_PROCESS config file which loads the 'splash/config' and then
tweaks the settings to your own preferences.

    my $tt2 = Template->new({
	INCLUDE_PATH => [ '/home/abw/tt2/templates',
		          Template::Config->instdir('templates') ],
        PRE_PROCESS => 'config'
    });

/home/abw/tt2/templates/config:

    [% # load the 'splash' configuration
       PROCESS splash/config;
       
       # tweak values to personal preferences
       splash.images       = '/~abw/tt2/images/splash'
       splash.select.col   = 'leaf'
       splash.unselect.col = 'bud'
    %]

The splash/config file includes some instructional comments on 
things you might like to tweak.

=head2 Colours

The Splash! library uses the colours defined in the html/rgb template.
The 'rgb' hash defined therein is imported as the 'splash.rgb' hash.

    [% INCLUDE splash/box col='grey75' %]

See the examples for further enlightenment on using colour.

=head2 Style

There are two very primitive "styles" implemented called "select" and
"unselect".  These are used to indicate which item on a menu is
selected, for example.  Each style defines characteristics like
background colour, font face, size and colour, text alignment, and so
on.  

The styles are implemented as hashes within the 'splash' hash.  Many
of the components respond to a 'style' variable being set and you can
pass a direct reference to splash.select or splash.unselect (or your
own styles).  e.g.

    [% INCLUDE splash/button 
	   content = "Unselected"
           style   = splash.unselect
    %]
    [% INCLUDE splash/button 
           content ="Selected"
           style   = splash.select
    %]

Alternately, you can use the 'select' variable to indicate either
of the inbuilt styles: splash.select or splash.unselect.

    [% INCLUDE splash/button 
           content = "Unselected"
           select  = 0
    %]
    [% INCLUDE splash/button
           content = "Selected"
           select  = 1
    %]

=head1 COMPONENT TEMPLATES

This section describes some of the component templates in the Splash!
library.  This documentation is incomplete and may also be inaccurate
in places.  The examples in the 'examples' directory are likely to be
a much better reference.


=head2 splash/text

Simple template to format text according to a selected/unselected style,
adding links, etc.

    [% INCLUDE splash/text
           content = 'Template Toolkit'
           link    = 'http://www.template-toolkit.org'
           select  = 0
           bold    = 1
    %]

[* INCLUDE item/config
    container = 'Text'
    items     = 'content, link, style, select'
    default   = 'col, font, bold, size'
*]


=head2 splash/table

A thin wrapper around html/table, allowing a colour to be specified
by name.

    [% WRAPPER splash/table
           col   = 'aqua'
	   pad   = 4
           width = '100%'
    %]
    <tr>
      <td>Foo</td>
      <td>Bar</td>
    </tr>
    [% END %]

[* INCLUDE item/config
    container = 'Table'
    items     = 'content, col, border, width, pad, space'
*]


=head2 splash/row

Creates a row for an HTML table.

    [% WRAPPER splash/table %]

       [% WRAPPER splash/row col='marine' %]
       <td>Foo</td><td>Bar</td>
       [% END %]

       [% WRAPPER splash/row col='aqua' %]
       <td>Foo</td><td>Bar</td>
       [% END %]

    [% END %]

[* INCLUDE item/config
    container = 'Row'
    items     = 'content, col, valign, rowspan'
*]


=head2 splash/cell

Creates a cell for an HTML table.

    [% WRAPPER splash/table + splash/row + splash/cell col='grey75' %]
	Hello World
    [% END %]

[* INCLUDE item/config
    container = 'Cell'
    items     = 'content, col, align, colspan'
*]


=head2 splash/box

A box created from a union of splash/table, splash/row and splash/cell.
The following is equivalent to the previous example.

    [% WRAPPER splash/box col='grey75' %]
	Hello World
    [% END %]

Configuration items are as per the individual templates.


=head2 splash/button

Creates a small button with rounded corners.

    [% INCLUDE splash/button
           content = 'Template Toolkit'
           select  = 1
           width   = '50%'
    %]

[* INCLUDE item/config
    container = 'Button'
    items     = 'content, style, select, width'
    default   = 'col, textcol, font, size, bold, width, align'
*]


=head2 splash/bar

Creates a bar with rounded corners at either the top or bottom, and 
square corners on the other.  Default has rounded at the top, set
'invert' to select bottom.

    [% INCLUDE splash/bar
           content = 'Hello World',
           select  = 1
    %]	

[* INCLUDE item/config
    container = 'Bar'
    items     = 'content, style, select, width, invert'
    default   = 'col, textcol, font, size, bold, width, align'
*]


=head2 splash/menu

Creates a menu as a series of splash/button elements.

    [% buttons = [ 
	  { text => 'One', link => 'one.html' }
          { text => 'Two', link => 'two.html' }
       ]
    %]

    [% INCLUDE splash/menu
           select = 2		# Two
    %]

[* INCLUDE item/config
    container = 'Menu'
    items     = 'buttons, nselect, width, align'
*]


=head2 splash/menubar

As above, but incorporated into a wider bar.

    [% WRAPPER splash/menubar %]
       Section Title
    [% END %]

[* INCLUDE item/config
    container = 'Bar'
    items     = 'buttons, nselect, width, align'
*]


=head2 splash/panel

A table with a coloured edge.

    [% WRAPPER splash/panel edge='black' fill='grey75' border=2 %]
       <tr>
         <td>Hello World</td>
       </tr>
    [% END %]

[* INCLUDE item/config
    container = 'Panel'
    items     = 'content, style, select, width, align, border'
    default   = 'edge, fill, pad'
*]


=head2 splash/pane

A union of splash/row + splash/cell.

    [% WRAPPER splash/panel select=1 %]
       [% WRAPPER splash/pane col='grey75' %]
          Hello World
       [% END %]

       [% WRAPPER splash/pane col='grey50' %]
          Hello Again
       [% END %]
    [% END %]


=head2 splash/tab

A simple button looking like a page tab.

    [% INCLUDE splash/tab
           content = 'Option 1'
           col = 'aqua'
    %]

[* INCLUDE item/config
    container = 'Tab'
    items     = 'content, style, select, width, align'
    default   = 'col, textcol, font, size, bold, tabalign'
*]


=head2 splash/tabset

A set of splash/tab components, similar to a menu.

[* INCLUDE item/config
    container = 'Tab'
    items     = 'tabs, select, invert'
*]


=head2 splash/tabbox

Add a splash/tab to the top of a splash/box.

[* INCLUDE item/config
    items     = 'title, content, width, tabwidth, select, border'
    default   = 'col, fill, tabalign, tablocate'
*]


=head2 splash/tabsbox

Add a splash/tabset to the top of a splash/box.

[* INCLUDE item/config
    items     = 'tabs, select, content, width, border, invert'
    default   = 'col, fill, tabalign, tablocate'
*]

=head2 splash/tabspanel

As per splash/tabsbox, but attached to a splash/panel instead of a
splash/box.


=head1 EXAMPLES

See the examples in the 'examples' sub-directory of the installation 
for comprehensive examples showing use of the Splash! library.



[*#------------------------------------------------------------------------*]
[* BLOCK item/config *]
Configuration items:

=over 4

[* PROCESS "item/$item" FOREACH item = items.split(',\s+') -*]

=back
[* IF default *]
The following items default to the relevant style values:

=over 4

[* PROCESS "default/$item" FOREACH item = default.split(',\s+') -*]

=back
[* END; END -*]
[*#------------------------------------------------------------------------*]
[* BLOCK item/content *]
=item content

[* container *] content.

[* END -*]
[* BLOCK item/title *]
=item title

[* container *] title.

[* END -*]
[* BLOCK item/link *]
=item link

URL which can be defined to make the text a link.

[* END -*]
[* BLOCK item/style *]
=item style

Reference to a style hash.

[* END -*]
[* BLOCK item/select *]
=item select

Flag to default the style to splash.select (select == true value) or
splash.unselect (select == false value).

[* END -*]
[* BLOCK item/col *]
=item col

Background colour.

[* END -*]
[* BLOCK item/border *]
=item border

Border width (default: 0)

[* END -*]
[* BLOCK item/width *]
=item width

Width in absolute pixels (e.g. '100') or as a percentage (e.g. '50%').
[* END -*]
[* BLOCK item/pad *]
=item pad

Cell padding.

[* END -*]
[* BLOCK item/space *]
=item space

Cell padding.

[* END -*]
[* BLOCK item/align *]
=item align

Horizontal alignment

[* END -*]
[* BLOCK item/valign *]
=item valign

Vertical alignment

[* END -*]
[* BLOCK item/rowspan *]
=item rowspan

Number of rows to span.

[* END -*]
[* BLOCK item/colspan *]
=item colspan

Number of columns to span.

[* END -*]
[* BLOCK item/invert *]
=item invert

Flag to invert [* container | lower *] to hang down instead of sitting
upright.

[* END -*]
[* BLOCK item/buttons *]
=item buttons

A reference to a list of hash arrays containing 'text' and 'link' items.

[* END -*]
[* BLOCK item/nselect *]
=item select (n or 0)

Indicates which button should be selected.  First item is 1.  0 indicates
no button selected.

[* END -*]
[* BLOCK item/tabs *]
=item tabs

List of hash references containing text/link entries, as per 
menu buttons.

[* END -*]
[* BLOCK item/tabwidth *]
=item tabwidth

Width of tabs.

[* END -*]
[*#------------------------------------------------------------------------*]
[* BLOCK default/col *]
=item col (style.col.text)

[* END -*]
[* BLOCK default/fill *]
=item fill (style.col.fill)

[* END -*]
[* BLOCK default/edge *]
=item edge (style.col.edge)

[* END -*]
[* BLOCK default/font *]
=item font (style.font.face)

[* END -*]
[* BLOCK default/bold *]
=item bold (style.font.bold)

[* END -*]
[* BLOCK default/size *]
=item size (style.font.size)

[* END -*]
[* BLOCK default/textcol *]
=item textcol (style.col.text)

[* END -*]
[* BLOCK default/width *]
=item width (style.button.width)

[* END -*]
[* BLOCK default/align *]
=item align (style.button.align)

[* END -*]
[* BLOCK default/tabalign *]
=item tabalign (style.tab.align)

[* END -*]
[* BLOCK default/tablocate *]
=item tablocate (style.tab.locate)

[* END -*]
[* BLOCK default/pad *]
=item pad (style.pad)

[* END -*]


