=head1 DESCRIPTION

[% USE wrap; page.intro | wrap(72) %]

=head2 Template Style and Parsing Options

=over 4

[% PROCESS option/tag %]

[% PROCESS option/tagstyle %]

[% PROCESS option/chomp %]

[% PROCESS option/trim %]

[% PROCESS option/interp %]

[% PROCESS option/case %]

=back

=head2 Template Files and Blocks

=over 4

[% PROCESS option/include %]

[% PROCESS option/delim %]

[% PROCESS option/absolute %]

[% PROCESS option/relative %]

[% PROCESS option/default %]

[% PROCESS option/blocks %]

[% PROCESS option/reset %]

[% PROCESS option/recurse %]

=back

=head2 Template Variables

=over 4

[% PROCESS option/variables %]

[% PROCESS option/constants %]

=back

=head2 Template Processing Options
[% TAGS star %]

The following options are used to specify any additional templates
that should be processed before, after, around or instead of the
template passed as the first argument to the Template process()
method.  These options can be perform various useful tasks such as
adding standard headers or footers to all pages, wrapping page output
in other templates, pre-defining variables or performing
initialisation or cleanup tasks, automatically generating page summary
information, navigation elements, and so on.

The task of processing the template is delegated internally to the
Template::Service module which, unsurprisingly, also has a process()
method.  Any templates defined by the PRE_PROCESS option are processed
first and any output generated is added to the output buffer.  Then
the main template is processed, or if one or more PROCESS templates
are defined then they are instead processed in turn.  In this case,
one of the PROCESS templates is responsible for processing the main
template, by a directive such as:

    [% PROCESS $template %]

The output of processing the main template or the PROCESS template(s)
is then wrapped in any WRAPPER templates, if defined.  WRAPPER
templates don't need to worry about explicitly processing the template
because it will have been done for them already.  Instead WRAPPER
templates access the content they are wrapping via the 'content'
variable.

    wrapper before
    [% content %]
    wrapper after

This output generated from processing the main template, and/or any
PROCESS or WRAPPER templates is added to the output buffer.  Finally,
any POST_PROCESS templates are processed and their output is also
added to the output buffer which is then returned.

If the main template throws an exception during processing then any
relevant template(s) defined via the ERROR option will be processed
instead.  If defined and successfully processed, the output from the
error template will be added to the output buffer in place of the
template that generated the error and processing will continue,
applying any WRAPPER and POST_PROCESS templates.  If no relevant ERROR
option is defined, or if the error occurs in one of the PRE_PROCESS,
WRAPPER or POST_PROCESS templates, then the process will terminate
immediately and the error will be returned.

[* TAGS default *]

=over 4

[% PROCESS option/preproc %]

[% PROCESS option/process %]

[% PROCESS option/wrapper %]

[% PROCESS option/error %]

=back

=head2 Template Runtime Options

=over 4

[% PROCESS option/evalperl %]

[% PROCESS option/output %]

[% PROCESS option/outpath %]

[% PROCESS option/debug %]

=back

=head2 Caching and Compiling Options

=over 4

[% PROCESS option/cache %]

[% PROCESS option/compile %]

=back

=head2 Plugins and Filters

=over 4

[% PROCESS option/plugins %]

[% PROCESS option/plugbase %]

[% PROCESS option/loadperl %]

[% PROCESS option/filters %]

=back

=head2 Compatibility, Customisation and Extension

=over 4

[% PROCESS option/version %]

[% PROCESS option/loadtmpl %]

[% PROCESS option/loadplug %]

[% PROCESS option/loadfilt %]

[% PROCESS option/tolerant %]

[% PROCESS option/service %]

[% PROCESS option/context %]

[% PROCESS option/stash %]

[% PROCESS option/parser %]

[% PROCESS option/grammar %]

=back


