[% TAGS star %]
[* DEFAULT 
   obj = '$template'
   pkg = 'Template'
-*]

=item  OUTPUT

Default output location or handler.  This may be specified as one of:
a file name (relative to OUTPUT_PATH, if defined, or the current
working directory if not specified absolutely); a file handle
(e.g. GLOB or IO::Handle) opened for writing; a reference to a text
string to which the output is appended (the string isn't cleared); a
reference to a subroutine which is called, passing the output text as
an argument; as a reference to an array, onto which the content will be
push()ed; or as a reference to any object that supports the print()
method.  This latter option includes the Apache::Request object which
is passed as the argument to Apache/mod_perl handlers.

example 1 (file name):

    my [* obj *] = [* pkg *]->new({
	OUTPUT => "/tmp/foo",
    });

example 2 (text string):

    my $output = '';

    my [* obj *] = [* pkg *]->new({
	OUTPUT => \$output,
    });

example 3 (file handle):

    open (TOUT, "> $file") || die "$file: $!\n";

    my [* obj *] = [* pkg *]->new({
	OUTPUT => \*TOUT,
    });

example 4 (subroutine):

    sub output { my $out = shift; print "OUTPUT: $out" }

    my [* obj *] = [* pkg *]->new({
	OUTPUT => \&output,
    });

example 5 (array reference):

    my [* obj *] = [* pkg *]->new({
	OUTPUT => \@output,
    })

example 6 (Apache/mod_perl handler):

    sub handler {
	my $r = shift;

	my $t = Template->new({
	    OUTPUT => $r,
	});
	...
    }

The default OUTPUT location be overridden by passing a third parameter
to the Template process() method.  This can be specified as any of the 
above argument types.

    $t->process($file, $vars, "/tmp/foo");
    $t->process($file, $vars, "bar");
    $t->process($file, $vars, \*MYGLOB);
    $t->process($file, $vars, \@output); 
    $t->process($file, $vars, $r);  # Apache::Request
    ...




