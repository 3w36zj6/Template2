[% TAGS star %]
[* DEFAULT 
   obj = '$template'
   pkg = 'Template'
-*]

=item CACHE_SIZE

The Template::Provider module caches compiled templates to avoid the need
to re-parse template files or blocks each time they are used.  The CACHE_SIZE
option is used to limit the number of compiled templates that the module
should cache.

By default, the CACHE_SIZE is undefined and all compiled templates are
cached.  When set to any positive value, the cache will be limited to
storing no more than that number of compiled templates.  When a new
template is loaded and compiled and the cache is full (i.e. the number
of entries == CACHE_SIZE), the least recently used compiled template
is discarded to make room for the new one.

The CACHE_SIZE can be set to 0 to disable caching altogether.

    my [* obj *] = [* pkg *]->new({
        CACHE_SIZE => 64,   # only cache 64 compiled templates
    });

    my [* obj *] = [* pkg *]->new({
        CACHE_SIZE => 0,   # don't cache any compiled templates
    });

As well as caching templates as they are found, the Template::Provider
also implements negative caching to keep track of templates that are 
I<not> found.  This allows the provider to quickly decline a request
for a template that it has previously failed to locate, saving the effort
of going to look for it again.  This is useful when an INCLUDE_PATH includes 
multiple providers, ensuring that the request is passed down through the 
providers as quickly as possible.

