#!/usr/bin/perl -w                                         # -*- perl -*-
#------------------------------------------------------------------------
#
# ttmkdocs  (docsrc/bin/ttmkdocs)
#
# This script builds the Template Toolkit documentation set from the
# source templates in docsrc/src, using library elements in docsrc/lib
# and XML configuration data in docsrc/xml.  It generates POD
# documentation files in docsrc/pod which can be glued onto the
# toolkit modules (in lib) using the 'ttpodglu' script
# (docsrc/bin/ttpodglu).  It also generates plain text files for the
# release notes: README, Changes and TODO which are written to
# docsrc/txt.  Finally, it builds the source templates for the HTML
# documentation which are written to docs/src and some additional
# library elements for same, written to docs/lib. 
#
#------------------------------------------------------------------------

use strict;
use lib qw( ./lib ../lib ../../lib );
use Template;
use XML::DOM;
use Getopt::Std;
use File::Basename;
use Cwd;

# Template::Test gets loaded to grok the version number for building
# its manpage.  this disables the autoflush option.
use Template::Test;
$Template::Test::NO_FLUSH = 1;

my $VERSION = 0.01;
my $PROGRAM = basename($0);

#$Template::View::DEBUG = 1;


#------------------------------------------------------------------------
# read command line options, offer help if they need it, etc.
#------------------------------------------------------------------------

my $args = { };
getopts('dhqvr:', $args);

die <<'EOF' if $args->{ h };
usage: $PROGRAM [ -q | -v | -h | -r /path/to/tt2/root ]

    -q             quiet mode - stop the annoying messages
    -v             verbose mode - get extra annoying messages
    -h             help - get this particular annoying message
    -r /tt2/root   specify path to TT2 distribution root

EOF


#------------------------------------------------------------------------
# attempt to grok the root directory of the distribution;
# script expects to be run in distribution root, in .../docsrc or
# .../docsrc/bin.  -r <rootdir> option can also be used.
#------------------------------------------------------------------------

my $root = $args->{ r };

unless ($root) {
    $root =  getcwd;
    $root =~ s[/docsrc(/bin)?$][];
}
die <<'EOF' unless -d "$root/docsrc/src";

This humble script is unable to determine the root directory of your
Template Toolkit distribution.  It is expecting to be run from the 
distribution directory itself, or in one of the 'docs' or 'docs/bin'
sub-directories.  Alternately, you can use the '-r' option to specify
the root directory.  e.g.

    $ $PROGRAM -r /home/abw/templates/src/Template2/

EOF


#------------------------------------------------------------------------
# define docset configuration options and template variables
#------------------------------------------------------------------------

my $dirs = {
    pod  => "docsrc/pod",
    text => "docsrc/txt",
    html => {
	src => "docs/src",
	lib => "docs/lib",
    }
};
my $vars = {
    ttversion => $Template::VERSION,
    program   => $PROGRAM,
    version   => $VERSION,
    quiet     => $args->{ q },
    verbose   => $args->{ v },
    dbg       => \&debug,
    dir       => $dirs,
    xmlfile   => "$root/docsrc/xml/ttdocs.xml",
};


#------------------------------------------------------------------------
# create a Template processor and fire!
#------------------------------------------------------------------------

my $template = Template->new({
    INCLUDE_PATH => "$root/docsrc/src:$root/docsrc/lib:$root/templates",
    PREFIX_MAP   => { src => 0, lib => 1, tt => 2 },
    OUTPUT_PATH  => $root,
    PRE_PROCESS  => [ 'config', 'authors' ],
    EVAL_PERL    => 1,
    FILTERS      => {
	tt_tags        => \&tt_tags,
	tt_quote_tags  => \&tt_quote_tags,
    },
    RECURSION => 1,
})
    || die $Template::ERROR, "\n";

my $scrub;
$template->process('docset/maker', $vars, \$scrub)
    || die "error: ", $template->error(), "\n";

print "all done\n";
exit(0);

#------------------------------------------------------------------------
# filters to fix any TT tags like [% this %] in the input, changing them
# to [% tt_start_tag %] this [% tt_end_tag %], effectively escaping them
#------------------------------------------------------------------------

sub tt_tags {
    my $text = shift;
    for ($text) {
	s/\[%/[% START_TAG %]/g;
	s/(?<!\[% START_TAG )%\]/[% tt_end_tag %]/g;
	s/\[% START_TAG %\]/[% tt_start_tag %]/g;
    }
    return $text;
}

sub tt_quote_tags {
    my $text = shift;
    for ($text) {
	s/(["\\\$])/\\$1/g;
	s/\[%/[% START_TAG %]/g;
	s/(?<!\[% START_TAG )%\]/\$tt_end_tag/g;
	s/\[% START_TAG %\]/\$tt_start_tag/g;
    }
    return $text;
}

sub debug {
    my $item = shift;
    my $name = shift || '';
    die "item not defined\n" unless defined $item;
    my $ref = ref $item;
    my $str = substr($item, 0, 32);
    $str .= '...' if length $str == 32;
    print STDERR ($name ? "$name => " : ''), "ref: [$ref]  item: [$str]\n";
}



