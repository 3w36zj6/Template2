IMPORTANT: The whole of the docsrc tree is now deprecated.  We don't use
it any more.  Documentation should be added straight into the .pm and .pod
files in lib.

This is the docsrc bundle for the Template Toolkit, containing all the
templates, XML, scripts and other bits and pieces required to build the 
Template Toolkit documentation in both POD and HTML formats.

Contents:

    bin     scripts for building the TT documentation
    lib     library containing shared document "chunks"
    pod     output for generated .pod files
    src     source directory for documentation templates
    txt     output for generated text files (e.g. Changes)
    xml     source directory for XML files

This 'docsrc' directory should be installed within the Template 
Toolkit distribution directory, i.e. at the same level and alongside
the 'docs' and 'lib' directories.

The source templates for the documentation are in the 'src' directory.
Additional template elements can be found in the 'lib' library directory.
The 'xml' directory contains the 'ttdocs.xml' file which contains
metadata for the documentation set.  

The 'bin' directory contains the 'ttmkdocs' script which builds the 
documentation.  The generated documentation gets written to the 
'pod' directory in POD form.  The HTML documentation gets written
to the '../docs/src' directory (yes, that's the 'docs' directory 
in the distribution root) along with the '../docs/lib/docset/config'
file which includes data structures describing the documentation 
pages.  The release notes (README, Changes and TODO) get written 
into the 'txt' directory.

The 'ttpodglu' script can then be used to install the POD documentation
and release notes into place.  The POD files in 'pod' gets glued onto
the end of the corresponding .pm files in '../lib/' (yep, the main TT2
lib directory), or copied as a '.pod' file if there isn't a corresponding
.pm file (e.g. Template::Manual, Template::FAQ, etc).  The documentation
for the tools, Template::Tools::(tpage|ttree), also get grafted onto
the end of the relevant scripts in ../bin.  The release notes get
copied to '..', the main TT2 distribution directory.


More notes follow...


Overview
--------

An XML file describes the docset in terms of books which contain pages.
This files contains all the metadata for the docset/books/pages but none
of the content (other than an introductory 'about' paragraph, etc).

The real page content is provided in the 'src' directory in the form
of POD documents with embedded TT directives.  In many cases, these
documents don't have headers, footers, etc., and they may pull in
content from various other places, insert variable values, etc.  All
the regular magic of the Template Toolkit can be bought into play to
help build the final POD pages.

Once we've turned a POD template into a final POD page, we write it to
the 'pod' directory and then run it through Pod::POM to turn it into
HTML.  However, we don't output the final HTML because the end-user
might want to customise it further.  So we output HTML with more
embedded TT directives that can be processed by the "second pass"
docset builder which happens when you "make install".  These directive
do things like building a table of contents, adding page and section
headers, etc., so by leaving these as soft-coded template directives
instead of hard-coded HTML, the end-user can easily change the style
of the docset without having the rebuild the entire thing from
scratch.

As well as generating the page templates, we also generate a
configuration file which describes the full docset structure,
including various calculated items like prev/next links between pages,
a full list of internal and external links, etc.

The user ends up with a 'docs' directory containing 'src' templates
which pull in various 'lib' templates during 'make install' to
generate final HTML docs in a style of their choosing.  They don't
have to have the XML::DOM module installed to build the docs, or
anything like that, because the end result is a 100% TT built document
set.


The XML File
------------

At the heart of the system is an XML file (xml/ttdocs.xml) which 
describes the overall structure of the docset.  It lists the books 
and pages, providing definitive titles, author information, intro
paragraph, and various other metadata items. 


The Script
----------

The bin/ttmkdocs script is pretty simple.  It sets up a Template object 
with the right configuration, pointing at the right directories, etc., 
and then uses it to process the docset.  It PRE_PROCESSes the 'config' and 
'authors' templates in the 'lib' directory and then sets to work
processing the lib/docset/maker template. 


The Docset Maker
----------------

The docset/maker template parses the XML file into a DOM and defines 
a MACRO or two to help extract bits from the DOM.  It parses the initial
part of the <docset> element and starts to build an in-memory docset
structure.  It then calls book/maker to parse each book in the docset
and further augment this structure.

It then processes the docset/config template to generate a new 
configuration template for the docset output which is written to 
../docs/lib/docset/config.  Finally it processes the docset/index
file to generate the index page for the docset.  This is written
to ../docs/src/index.html


The Book Maker
--------------

The book/maker template parses a book element from the XML DOM and 
augments the in-memory docset structure.  It calls page/maker to parse
each page in the book and do the same.  Finally, it process book/index
to generate an index page for the book.


The Page Maker
--------------

The page/maker template parses a page element from the XML DOM and 
adds it to the current book.  Then it processes the source template
for the page (page.src) and passes it onto another template depending
on the page type.  Most pages are 'pod' type pages and are passed to 
the pod/page template and then the html/page template.  Some pages are
'text' type (e.g. Changes, README) and are written directly to a text
file (e.g. txt/Changes, txt/README) and then passed to the html/text
template.


The Pod Maker
-------------

The pod/page template simply adds some standard headers and footers to 
the POD content generated from the source template.  The pod/footer 
template, for example, adds the AUTHOR, COPYRIGHT, VERSION, SEEALSO
sections using the metadata specified originally in the XML file.  The 
output is a complete POD page which is written to a file in the 'pod' 
directory.


The HTML Maker
--------------

The html/page template takes the POD generated by the above and runs it
through Pod::POM to build a Pod Object Model.  This is them presented via
a TT VIEW which maps the POD structural elements onto templates in the 
lib/pod/html directory.  The output is an HTML page containing further
TT directives which is written to the relevant file in the ../docs/src 
directory.  

The html/text template simply wraps plain text up in a simple HTML
page within a <pre>...</pre> element and writes that to the corresponding
file under the same directory.


Links
-----

The configuration file generated for the second phase contains a list
of all the internal and external links in the docset.  These are 
harvested during Pod::POM processing from links embedded as L<...>.
Internal links are those that map to Template Toolkit modules, e.g.
L<Template::Context>.  Links that don't map to a known module are 
treated as links to external modules if they contain a '::' or as 
internal document links if not.  

So, L<Template::Context> ultimately generates a relative link to the
relevant page within the docset.  On the other hand, L<Foo::Bar> doesn't
map to any module identified by the docset to it ultimately generates a 
link to search.cpan.org to display information on the module.  A link 
such as L<Section One> will generate an internal document link like
'#Section_One'.

To trick the docset into recognising single words as module (e.g. DBI,
CGI, POSIX, GD), simply add a 'CPAN::' prefix to the name.  This will
be stripped from the name but the module will be recognise here and 
wherever else it it used as an external CPAN module.  

    Blah blah blah the L<CPAN::CGI> module and I can reference it again
    as just L<CGI> and that's OK, or I can add L<CGI|my own text> etc.

You only need to add the prefix to one instance and can leave the
others as they are.  If you want to reference the 'CPAN' module, then
you'll need to write: L<CPAN::CPAN>.



